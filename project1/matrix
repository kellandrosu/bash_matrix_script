#!/bin/bash -e


dims(){	
	# DESCRIPTION
	#	takes a filename as argument and prints its matrix dimensions
	#	exits 0
	
	cols=$( wc -w < <( head <$1 -n 1 ) )
	rows=$( wc -l <$1 )
	echo "$rows $cols"
	exit 0
}


transpose(){
	# DESCRIPTION: 
	#	takes a filename as argument and transposes its matrix elements
	#	exits 0

	#create safe tempfile
	tempfile="tempfile$$"
	while [ -f $tempfile ]
	do
		tempfile="$tempfile$$"
	done
	touch $tempfile

	#number of existing rows = number of new columns
	newcols=$( wc -l <$1 )

	#store all elements linearly as read left to right
	while read firstline 
	do
		for i in $firstline
		do
			echo "$i" >>$tempfile
		done
	done <$1

	rm -f $1 
	touch $1

	#print elements adding newline for each column
	while read elem
	do
		counter=$(expr $counter + 1 )
		echo $elem | tr '\n' '\t' | cat >>$1
		if [ $counter = $newcols ]
		then
			counter=0
			echo "" >>$1
		fi	
	done <$tempfile

	rm $tempfile -f
	exit 0
}


add() {
	# DESCRIPTION
	#	adds two matrices

	#check if addition is valid
	m1cols=$( wc -w < <( head <$1 -n 1 ) )
	m2cols=$( wc -w < <( head <$2 -n 1 ) )
	m1rows=$( wc -l <$1 )
	m2rows=$( wc -l <$2 )

	if [ $m1cols != $m2cols ]; then
		echo "matrices cannot be added" >&2
		exit 4
	elif [ $m1rows != $m2rows ]; then
		echo "matrices cannot be added" >&2
		exit 4
	fi

	#do addition
	counter=0
	while read -a line1
	do
		counter=$(expr $counter + 1 )
		read -a line2 < <( tail -n +$counter $2 )		#read $2 as array starting from line $counter
		for i in ${!line1[@]}							#iterated through line1 without expanding i 
		do
			echo $(expr ${line1[$i]} + ${line2[$i]} ) | tr '\n' '\t'
		done
		echo ""
	done <$1

}


mean(){
	echo "do mean"
}

multiply() {
echo "multiply"
}


#PARSE ARGUMENTS
#check single matrix operations
if [ $1 = "dims" ] || [ $1 = "transpose" ] || [ $1 = "mean" ] ; then
	if [ $# = 1 ] ; then
		if [ -f MATRIX ] ; then
			$1 MATRIX	
		else
			echo "MATRIX file does not exist" >&2
			exit 2
		fi
	elif [ $# = 2 ]; then
		if [ -f $2 ] ; then
			$1 "$2"
		else 
			echo -e "error opening $2" >&2
			exit 2
		fi
	else
		echo -e "invalid number of arguments" >&2
		exit 1
	fi
#check two matrix operations
elif [ $1 = "add" ] || [ $1 = "multiply" ] ; then
	if [ $# = 3 ]; then
		if [ ! -f $2 ]; then
			echo -e "could not open $2" >&2
			exit 2
		elif [ ! -f $3 ]; then
			echo -e "could not open $3" >&2
			exit 2
		else
			$1 "${@:2}"
		fi
	else
		echo -e "invalid number of arguments" >&2
		exit 1
	fi
else
	echo -e "invalid argument: $1" >&2
	exit 1
fi
