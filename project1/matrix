#!/bin/bash -e


dims(){	
	# DESCRIPTION
	#	takes a filename as argument and prints its matrix dimensions
	cols=$( head <$1 -n 1 |  wc -w  )
	rows=$( wc -l <$1 )
	echo "$rows $cols"
}


transpose(){
	# DESCRIPTION: 
	#	takes a filename as argument and transposes its matrix elements

	#number of existing rows = number of new columns
	cols=$( head <$1 -n 1 |  wc -w  )
	rows=$( wc -l <$1 )
	
	#iterate i through cols
	i=0
	while [ $i != $cols ]
	do
	#iterate j through rows
	j=1
		while read -a line
		do
			echo -n -e "${line[$i]}"				#cat ith character of jth row
			[[ $j -lt $rows ]] && echo -e -n "\t"	#tab-separate elements unless its last element	
			j=$(expr $j + 1)
		done <$1
		
		echo ""				#newline
		i=$(expr $i + 1)
	done
}


add() {
	# DESCRIPTION
	#	adds two matrices

	#check if addition is valid
	m1cols=$( head <$1 -n 1 |  wc -w  )
	m2cols=$( head <$2 -n 1 |  wc -w  )
	m1rows=$( wc -l <$1 )
	m2rows=$( wc -l <$2 )

	if [ $m1cols != $m2cols ]; then
		echo "matrices cannot be added" >&2
		exit 4
	elif [ $m1rows != $m2rows ]; then
		echo "matrices cannot be added" >&2
		exit 4
	fi

	#do addition
	counter=0
	while read -a line1
	do
		counter=$(expr $counter + 1 )
		read -a line2 < <( tail -n +$counter $2 )		#read $2 as array starting from line $counter
		for i in ${!line1[@]}							#iterated through line1 without expanding i 
		do
			echo -n $(expr ${line1[$i]} + ${line2[$i]} )
			[[ $i -lt $(expr $m1cols - 1 ) ]] && echo -e -n "\t"  	 	#tab-separate elements unless its last element
		done
		echo ""
	done <$1

}


mean(){

	cols=$( head <$1 -n 1 |  wc -w  )
    
	#create safe tempfile to store transposed matrix
    temptrans="temptrans$$"
    while [ -f $temptrans ]
    do
        temptrans="$temptrans$$"
    done
    touch $temptrans
    transpose $1 | cat >$temptrans
	
	col=1		
	while read line ; do 
		sum=0
		count=0
		for val in $line ; do
			sum=$(( $sum + $val))
			(( count+=1 ))
		done

		mean=$(( ($sum + ($count/2)*( ($sum>0)*2-1 )) / $count ))		
		echo -n $mean
		
		[[ $col -lt  $cols ]] && echo -n -e "\t"
		(( col+=1 ))
		
	done <$temptrans
	echo ""
}



multiply() {

	#check if multiplication is valid
    m1cols=$( head <$1 -n 1 |  wc -w  )
    m2cols=$( head <$2 -n 1 |  wc -w  )
    m1rows=$( wc -l <$1 )
    m2rows=$( wc -l <$2 )

    #cols in m1 must equal rows in m2
    if [ $m1cols != $m2rows ]; then
        echo "matrices cannot be multiplied" >&2
        exit 4
    fi

    #create safe tempfile to store transposed matrix
    temptrans="temptrans$$"
    while [ -f $temptrans ]
    do
        temptrans="$temptrans$$"
    done
    touch $temptrans
    transpose $2 | cat >$temptrans

    range=$(( $m1cols - 1))	


	while read -a m1line			#iterate through m1 cols
    do
        tabcount=1
       
	    while read -a m2line		#iterate through m2 rows
        do
            sum=0

            for i in $(seq 0 $range)		#iterate through the elements of each row and col
            do
                product=$(( ${m2line[$i]} * ${m1line[$i]} ))
                sum=$(( sum + product ))
            done

            echo -n -e "$sum"
            if [ $tabcount -lt $m2cols ]		#add tab if we're not at end of line
            then
              echo -e -n "\t"
              (( tabcount+=1 ))
            fi
        done < $temptrans
        echo ""
	done <$1

	rm -f $temptrans
}


#PARSE ARGUMENTS
#check single matrix operations
if [ $1 = "dims" ] || [ $1 = "transpose" ] || [ $1 = "mean" ] ; then

	if [ $# = 1 ] ; then
		
		#create safe tempfile to store input matrix
		tempMatrix="tempfile$$"
		while [ -f $tempMatrix ]
		do
			tempMatrix="$tempMatrix$$"
		done
		touch $tempMatrix

		cat >$tempMatrix

		$1 $tempMatrix
	
		rm $tempMatrix -f
		exit 0

	elif [ $# = 2 ]; then
		if [ -f $2 ] ; then
			$1 "$2"
			exit 0
		else 
			echo -e "error opening $2" >&2
			exit 2
		fi
	else
		echo -e "invalid number of arguments" >&2
		exit 1
	fi
#check two matrix operations
elif [ $1 = "add" ] || [ $1 = "multiply" ] ; then
	if [ $# = 3 ]; then
		if [ ! -f $2 ]; then
			echo -e "could not open $2" >&2
			exit 2
		elif [ ! -f $3 ]; then
			echo -e "could not open $3" >&2
			exit 2
		else
			$1 "${@:2}"
			exit 0
		fi
	else
		echo -e "invalid number of arguments" >&2
		exit 1
	fi
else
	echo -e "invalid argument: $1" >&2
	exit 1
fi
